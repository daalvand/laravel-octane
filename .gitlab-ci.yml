stages:
  - start
  - praparation
  - test
  - build
  - final

variables:
  DEPLOY_BASE_DIR: /home/matthew/laravel/octane/$CI_COMMIT_BRANCH
  VOLUMES_DIR: $DEPLOY_BASE_DIR/volumes


start:
  stage: start
  script:
    - export NEW_RELEASE_DIR=$DEPLOY_BASE_DIR/releases/$(date +%Y_%m_%d_%H_%M_%S)
    - echo "NEW_RELEASE_DIR=$NEW_RELEASE_DIR" >> variables.env

    - mkdir -p $NEW_RELEASE_DIR
    - cp -r . $NEW_RELEASE_DIR
    - rm -rf $NEW_RELEASE_DIR/.git

    - docker-compose -f $NEW_RELEASE_DIR/docker-compose.prd.yml build
  artifacts:
    reports:
      dotenv: variables.env
  only:
    variables:
      - ( $CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "staging" || $CI_COMMIT_BRANCH == "develop" )
  tags:
    - $CI_COMMIT_BRANCH

create_volume_directories:
  stage: praparation
  script:
    - echo "Linking volume directories"
    - if [ ! -d $VOLUMES_DIR/storage ]; then mkdir -p $VOLUMES_DIR/storage && 
      cp -r $NEW_RELEASE_DIR/src/storage $VOLUMES_DIR; fi
    - if [ ! -d $VOLUMES_DIR/mysql ]; then mkdir -p $VOLUMES_DIR/mysql; fi
    - if [ ! -d $VOLUMES_DIR/home ]; then mkdir -p $VOLUMES_DIR/home; fi
  only:
    variables:
      - ( $CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "staging" || $CI_COMMIT_BRANCH == "develop" )
  tags:
    - $CI_COMMIT_BRANCH

link_environment_variables:
  stage: praparation
  script:
    - echo "Linking environment variables"
    - if [ ! -f $VOLUMES_DIR/.env ]; then cp $NEW_RELEASE_DIR/src/.env.example $VOLUMES_DIR/.env; fi
    - if [ ! -f $VOLUMES_DIR/.env.testing ]; then cp $NEW_RELEASE_DIR/src/.env.example $VOLUMES_DIR/.env.testing; fi
    - if [ ! -f $VOLUMES_DIR/.dockerenv ]; then cp $NEW_RELEASE_DIR/.env.example $VOLUMES_DIR/.dockerenv; fi
    - ln -nfs $VOLUMES_DIR/.dockerenv $NEW_RELEASE_DIR/.env
    - docker-compose -f  $NEW_RELEASE_DIR/docker-compose.prd.yml run --rm --no-deps app php artisan key:generate
    - docker-compose -f  $NEW_RELEASE_DIR/docker-compose.prd.yml run --rm --no-deps app php artisan key:generate --env=testing
  only:
    variables:
      - ( $CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "staging" || $CI_COMMIT_BRANCH == "develop" )
  tags:
    - $CI_COMMIT_BRANCH

phpcs:
  stage: test
  script:
    - docker-compose -f  $NEW_RELEASE_DIR/docker-compose.prd.yml run --rm --no-deps app
      php ./vendor/bin/phpcs --standard=./phpcs.xml ./
  only:
    variables:
      - ( $CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "staging" || $CI_COMMIT_BRANCH == "develop" )
  tags:
    - $CI_COMMIT_BRANCH

larastan:
  stage: test
  script:
    - docker-compose -f  $NEW_RELEASE_DIR/docker-compose.prd.yml run --rm --no-deps app 
      php ./vendor/bin/phpstan analyse -c ./phpstan.neon --memory-limit 1G
  only:
    variables:
      - ( $CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "staging" || $CI_COMMIT_BRANCH == "develop" )
  tags:
    - $CI_COMMIT_BRANCH

phpunit:
  stage: test
  script:
    - docker-compose -f  $NEW_RELEASE_DIR/docker-compose.prd.yml run --rm --no-deps app php artisan test
  only:
    variables:
      - ( $CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "staging" || $CI_COMMIT_BRANCH == "develop" )
  tags:
    - $CI_COMMIT_BRANCH

build:
  stage: build
  script:
    - echo 'Migrating database'
    - docker-compose -f  $NEW_RELEASE_DIR/docker-compose.prd.yml up -d mysql
    - docker-compose -f  $NEW_RELEASE_DIR/docker-compose.prd.yml run --rm --no-deps app php artisan migrate --force

    - echo 'Switching to new docker container'
    - docker-compose -f  $NEW_RELEASE_DIR/docker-compose.prd.yml up --force-recreate --build --remove-orphans -d

    - echo 'Linking current release'
    - ln -nfs $NEW_RELEASE_DIR $DEPLOY_BASE_DIR/current
  only:
    variables:
      - ( $CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "staging" || $CI_COMMIT_BRANCH == "develop" )
  tags:
    - $CI_COMMIT_BRANCH

final:
  stage: final
  script:
    - echo 'Clearing cache'
    - docker-compose -f  $NEW_RELEASE_DIR/docker-compose.prd.yml exec -T app php artisan optimize

    - echo 'Cleaning old releases'
    - cd $DEPLOY_BASE_DIR/releases
    - ls -1d */ -t | tail -n +6 | xargs rm -rf

    - echo "Envoy deployment script finished.\n";
  only:
    variables:
      - ( $CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "staging" || $CI_COMMIT_BRANCH == "develop" )
  tags:
    - $CI_COMMIT_BRANCH
